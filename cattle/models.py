from django.db import models


STATUS_CHOICES = [
    ('healthy', '‡∏õ‡∏Å‡∏ï‡∏¥'),
    ('sick', '‡∏õ‡πà‡∏ß‡∏¢'),
    ('forsale', '‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢'),
]

class Cattle(models.Model):
    tag_no = models.CharField(max_length=50, unique=True)  # AnimalID
    name = models.CharField(max_length=100, blank=True, null=True)
    gender = models.CharField(
        max_length=10,
        choices=[('male', '‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ'), ('female', '‡∏ï‡∏±‡∏ß‡πÄ‡∏°‡∏µ‡∏¢')]
    )
    breed = models.CharField(max_length=100, blank=True, null=True)
    category = models.CharField(max_length=100, blank=True, null=True)  # ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (‡πÇ‡∏Ñ‡∏ô‡∏°, ‡πÇ‡∏Ñ‡∏™‡∏≤‡∏ß, ‡πÇ‡∏Ñ‡∏Ç‡∏∏‡∏ô)
    housing = models.CharField(max_length=100, blank=True, null=True)   # ‡∏Ñ‡∏≠‡∏Å/‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏∑‡∏≠‡∏ô

    birth_date = models.DateField(blank=True, null=True)
    mother = models.CharField(max_length=50, blank=True, null=True)
    father = models.CharField(max_length=50, blank=True, null=True)

    def __str__(self):
        return f"{self.tag_no} - {self.name or 'Unnamed'}"


class FeedingRation(models.Model):
    cattle = models.ForeignKey(Cattle, on_delete=models.CASCADE, related_name="rations")
    ration_id = models.CharField(max_length=50)  # ‡πÄ‡∏ä‡πà‡∏ô FTMR-1, FTMR-2
    feeding_time = models.CharField(max_length=100)  # ‡πÄ‡∏ä‡πà‡∏ô "07:30, 16:30 / ‡∏ô‡πâ‡∏≥‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ï‡∏•‡∏≠‡∏î‡∏ß‡∏±‡∏ô"
    fresh_weight = models.DecimalField(max_digits=5, decimal_places=2)  # ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏î (‡∏Å‡∏Å.)
    dry_weight = models.DecimalField(max_digits=5, decimal_places=2)    # ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏´‡πâ‡∏á (‡∏Å‡∏Å.)
    supplement = models.TextField(blank=True, null=True)  # ‡πÄ‡∏ä‡πà‡∏ô "‡∏û‡∏£‡∏µ‡∏°‡∏¥‡∏Å‡∏ã‡πå‡πÅ‡∏£‡πà‡∏ò‡∏≤‡∏ï‡∏∏-‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô 80 ‡∏Å‡∏£‡∏±‡∏°/‡∏ß‡∏±‡∏ô"

    def __str__(self):
        return f"{self.ration_id} for {self.cattle.tag_no}"
    
class HealthCheck(models.Model):  
    cattle = models.ForeignKey(Cattle, on_delete=models.CASCADE, related_name='healthchecks')
    check_date = models.DateField()
    temperature = models.DecimalField(max_digits=4, decimal_places=1, null=True, blank=True)
    heart_rate = models.IntegerField(null=True, blank=True)
    weight = models.DecimalField(max_digits=6, decimal_places=2, null=True, blank=True)
    notes = models.TextField(blank=True, null=True)

    # üëá ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    status = models.CharField(
        max_length=20,
        choices=[('healthy', '‡∏õ‡∏Å‡∏ï‡∏¥'), ('sick', '‡∏õ‡πà‡∏ß‡∏¢'), ('forsale', '‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢')],
        default='healthy'
    )

    class Meta:
        ordering = ['-check_date']

    def __str__(self):
        return f"Health {self.cattle.tag_no} on {self.check_date}"
    
class Treatment(models.Model):
    cattle = models.ForeignKey(Cattle, on_delete=models.CASCADE, related_name='treatments')
    diagnosis = models.CharField(max_length=255)
    treatment_date = models.DateField()
    medication = models.CharField(max_length=255, blank=True, null=True)
    doctor_name = models.CharField(max_length=100, blank=True, null=True)
    notes = models.TextField(blank=True, null=True)

    def __str__(self):
        return f"Treatment {self.cattle.tag_no} on {self.treatment_date}"


class Vaccination(models.Model):
    cattle = models.ForeignKey(Cattle, on_delete=models.CASCADE, related_name='vaccinations')
    vaccine_name = models.CharField(max_length=100)
    vaccine_date = models.DateField()
    next_due_date = models.DateField(blank=True, null=True)
    doctor_name = models.CharField(max_length=100, blank=True, null=True)

    def __str__(self):
        return f"Vaccine {self.vaccine_name} for {self.cattle.tag_no}"


class Notification(models.Model):
    cattle = models.ForeignKey(Cattle, on_delete=models.CASCADE, related_name='notifications')
    type = models.CharField(
        max_length=50,
        choices=[
            ('vaccine', 'Vaccine'),
            ('checkup', 'Checkup'),
            ('weight', 'Weight'),
            ('other', 'Other'),
        ]
    )
    message = models.TextField()
    notify_date = models.DateField()
    status = models.CharField(
        max_length=20,
        choices=[('pending', 'Pending'), ('done', 'Done')],
        default='pending'
    )

    def __str__(self):
        return f"Notification {self.type} for {self.cattle.tag_no}"


class Report(models.Model):
    cattle = models.ForeignKey(Cattle, on_delete=models.CASCADE, related_name='reports')
    report_date = models.DateField(auto_now_add=True)
    content = models.TextField()

    def __str__(self):
        return f"Report {self.cattle.tag_no} - {self.report_date}"

class CalendarEvent(models.Model):
    EVENT_TYPES = [
        ('feeding', '‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£'),
        ('health', '‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤'),
        ('breeding', '‡∏ú‡∏™‡∏°‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå'),
        ('other', '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'),
    ]

    cattle = models.ForeignKey(Cattle, on_delete=models.CASCADE, related_name='events')
    title = models.CharField(max_length=200)
    start = models.DateTimeField()
    end = models.DateTimeField(blank=True, null=True)
    event_type = models.CharField(max_length=50, choices=EVENT_TYPES)
    notes = models.TextField(blank=True, null=True)

    def __str__(self):
        return f"{self.title} ({self.cattle.tag_no})"
    
