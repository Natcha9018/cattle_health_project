from django import forms
from django.utils import timezone
from .models import Cattle, HealthCheck, CalendarEvent, Vaccination, FeedingRation

# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HealthCheck status ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
STATUS_CHOICES = (
    ('healthy', '‡∏õ‡∏Å‡∏ï‡∏¥'),
    ('sick', '‡∏õ‡πà‡∏ß‡∏¢'),
    ('forsale', '‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢'),
)

# ------------------ CattleForm ------------------
class CattleForm(forms.ModelForm):
    GENDER_CHOICES = [
        ('male', '‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ'),
        ('female', '‡∏ï‡∏±‡∏ß‡πÄ‡∏°‡∏µ‡∏¢'),
    ]

    gender = forms.ChoiceField(choices=GENDER_CHOICES, label='‡πÄ‡∏û‡∏®')
    status = forms.ChoiceField(choices=STATUS_CHOICES, label='‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', required=False)

    # ‡πÅ‡∏Å‡πâ‡∏û‡πà‡∏≠‡πÅ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô input ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÑ‡∏î‡πâ
    father = forms.CharField(label='‡∏û‡πà‡∏≠‡πÇ‡∏Ñ', required=False, widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏û‡πà‡∏≠‡πÇ‡∏Ñ'}))
    mother = forms.CharField(label='‡πÅ‡∏°‡πà‡πÇ‡∏Ñ', required=False, widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡πà‡πÇ‡∏Ñ'}))

    class Meta:
        model = Cattle
        fields = ['tag_no', 'name', 'birth_date', 'gender', 'breed', 'category', 'housing', 'mother', 'father']
        widgets = {
            'tag_no': forms.TextInput(attrs={'class': 'form-control', 'placeholder': '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß'}),
            'name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': '‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ'}),
            'birth_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'breed': forms.TextInput(attrs={'class': 'form-control', 'placeholder': '‡∏™‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå'}),
            'category': forms.TextInput(attrs={'class': 'form-control', 'placeholder': '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏Ñ'}),
            'housing': forms.TextInput(attrs={'class': 'form-control', 'placeholder': '‡∏Ñ‡∏≠‡∏Å/‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏∑‡∏≠‡∏ô'}),
        }

    def save(self, commit=True):
        cattle = super().save(commit=commit)

        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ status ‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‚Üí ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ‡∏ó‡∏µ‡πà HealthCheck ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        status = self.cleaned_data.get('status')
        if status:
            last_check = cattle.healthchecks.first()
            if last_check:
                last_check.status = status
                last_check.save()
            else:
                HealthCheck.objects.create(
                    cattle=cattle,
                    check_date=cattle.birth_date or timezone.now().date(),
                    status=status
                )

        return cattle
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå
        for field in self.fields.values():
            field.required = False

# ------------------ HealthCheckForm ------------------
class HealthCheckForm(forms.ModelForm):
    status = forms.ChoiceField(choices=STATUS_CHOICES, label='‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞')

    class Meta:
        model = HealthCheck
        fields = ['check_date', 'temperature', 'heart_rate', 'weight', 'status', 'notes']
        widgets = {
            'check_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'temperature': forms.NumberInput(attrs={'class': 'form-control', 'step': 0.1}),
            'heart_rate': forms.NumberInput(attrs={'class': 'form-control'}),
            'weight': forms.NumberInput(attrs={'class': 'form-control', 'step': 0.1}),
            'notes': forms.Textarea(attrs={'class': 'form-control', 'rows': 3, 'placeholder': '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°'}),
        }

# ------------------ VaccinationForm ------------------
class VaccinationForm(forms.ModelForm):
    class Meta:
        model = Vaccination
        fields = ['vaccine_name', 'vaccine_date', 'next_due_date', 'doctor_name']
        widgets = {
            'vaccine_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': '‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô'}),
            'vaccine_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'next_due_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'doctor_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏â‡∏µ‡∏î/‡∏´‡∏°‡∏≠'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields.values():
            field.required = False   # üëà ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå optional


class FeedingRationForm(forms.ModelForm):
    class Meta:
        model = FeedingRation
        fields = ['ration_id', 'feeding_time', 'fresh_weight', 'dry_weight', 'supplement']
        labels = {
            'ration_id': 'Ration Name',
            'feeding_time': '‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£',
            'fresh_weight': '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏î (‡∏Å‡∏Å.)',
            'dry_weight': '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏´‡πâ‡∏á (‡∏Å‡∏Å.)',
            'supplement': '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏° / ‡∏û‡∏£‡∏µ‡∏°‡∏¥‡∏Å‡∏ã‡πå',
        }
        
        widgets = {
            'ration_id': forms.TextInput(attrs={'class': 'form-control', 'placeholder': '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£'}),
            'feeding_time': forms.TextInput(attrs={'class': 'form-control', 'placeholder': '‡πÄ‡∏ä‡πà‡∏ô 07:30, 16:30 / ‡∏ô‡πâ‡∏≥‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ï‡∏•‡∏≠‡∏î‡∏ß‡∏±‡∏ô'}),
            'fresh_weight': forms.NumberInput(attrs={'class': 'form-control', 'step': 0.01}),
            'dry_weight': forms.NumberInput(attrs={'class': 'form-control', 'step': 0.01}),
            'supplement': forms.Textarea(attrs={'class': 'form-control', 'rows': 2, 'placeholder': '‡πÄ‡∏ä‡πà‡∏ô ‡∏û‡∏£‡∏µ‡∏°‡∏¥‡∏Å‡∏ã‡πå‡πÅ‡∏£‡πà‡∏ò‡∏≤‡∏ï‡∏∏ 80 ‡∏Å‡∏£‡∏±‡∏°/‡∏ß‡∏±‡∏ô'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields.values():
            field.required = False   # üëà optional ‡∏´‡∏°‡∏î


class CalendarEventInlineForm(forms.ModelForm):
    class Meta:
        model = CalendarEvent
        fields = ['title', 'start', 'end', 'event_type', 'notes']
        widgets = {
            'title': forms.TextInput(attrs={'class': 'form-control', 'placeholder': '‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°'}),
            'start': forms.DateTimeInput(attrs={'type': 'datetime-local', 'class': 'form-control'}),
            'end': forms.DateTimeInput(attrs={'type': 'datetime-local', 'class': 'form-control'}),
            'event_type': forms.Select(attrs={'class': 'form-select'}),
            'notes': forms.Textarea(attrs={'class': 'form-control', 'rows': 3, 'placeholder': '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields.values():
            field.required = False   # üëà optional
